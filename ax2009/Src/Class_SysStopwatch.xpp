//
// https://github.com/mazzy-ax/SysStopwatch
//
// класс обертка класса System.Diagnostics.Stopwatch
// см. https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch
//
// быстрый и эффективный класс:
// + не задействует метод new(), поэтому можно спокойно использовать classFactory.createClass() и другие фабрики
// + объекты создаются в памяти только по необходимости
// + минимум вычислений на X++, форматирование и преобразование в строку выполняется в .net
// + скрывает взаимодействие с CLR - программист может просто использовать X++ класс в своем коде
// + метод stopwatch() возвращает CLR-объект  - программист может получить доступ ко всей функциональности .net-объекта
// + метод toString() позволяет видеть время выполнения в отладчике
//
class SysStopwatch
{
    System.Diagnostics.Stopwatch stopwatch;

    // возвращает строку со временем выполнения в формате [-][d.]hh:mm:ss (без миллисекунд)
    public str elapsed()
    {
        str   ret;
        int64 ticks;
        int64 ticksPerSecond = 10000000; // https://docs.microsoft.com/en-us/dotnet/api/system.timespan.tickspersecond

        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        ticks = stopwatch.get_ElapsedTicks();
        ticks -= ticks mod ticksPerSecond;  // отбросим миллисекунды

        ret = System.TimeSpan::FromTicks(ticks).ToString();

        return ret;
    }

    public int64 elapsedMilliseconds()
    {
        int64 ret;

        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        ret = stopwatch.get_ElapsedMilliseconds();

        return ret;
    }

    public int64 elapsedTicks()
    {
        int64 ret;

        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        ret = stopwatch.get_ElapsedTicks();

        return ret;
    }

    // возвращает строку со временем выполнения в формате [-][d.]hh:mm:ss[.ffffff] (с миллисекундами)
    public str elapsedWide()
    {
        str ret;
        System.TimeSpan timespan;

        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        timespan = stopwatch.get_Elapsed();

        ret = timespan.ToString();

        return ret;
    }

    protected void ensureInitialized()
    {
        if( !stopwatch )
        {
            stopwatch = new System.Diagnostics.Stopwatch();
        }
    }

    public boolean isRunning()
    {
        boolean ret;

        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        ret = stopwatch.get_IsRunning();

        return ret;
    }

    public SysStopwatch reset()
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        stopwatch.Reset();

        return this;
    }

    public SysStopwatch start()
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        stopwatch.Start();

        return this;
    }

    public SysStopwatch stop()
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        this.ensureInitialized();

        stopwatch.Stop();

        return this;
    }

    public System.Diagnostics.Stopwatch stopwatch()
    {
        this.ensureInitialized();

        return stopwatch;
    }

    public str toString()
    {
        return this.elapsed();
    }

    public static SysStopwatch construct()
    {
        return new SysStopwatch();
    }


    public static SysStopwatch startNew()
    {
        return SysStopwatch::construct().start();
    }

}