//
// https://github.com/mazzy-ax/SysStopwatch
//
class SysStopwatchTest extends SysTestCase
{

    void testConstruct()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();

        this.assertNotNull(stopwatch);
        this.assertTrue(SysDictClass::is(stopwatch, classnum(SysStopwatch)));
        this.assertFalse(stopwatch.isRunning());
    }

    void testElapsed()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();
        str elapsed;

        sleep(50);
        elapsed = stopwatch.elapsed();

        this.assertTrue(match(@'^:d:d\::d:d\::d:d$', elapsed), elapsed);
    }

    void testElapsed_NotStarted()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();

        this.assertNotNull(stopwatch);
        this.assertEquals('00:00:00', stopwatch.elapsed());
    }

    void testElapsedMilliseconds()
    {
        SysStopwatch sysStopWatch = SysStopWatch::startNew();
        int64 zero = 0;
    ;
        sleep(50);

        this.assertNotNull(sysStopWatch);
        this.assertNotEqual(zero, sysStopWatch.elapsedMilliseconds());
    }

    void testElapsedMilliseconds_NotStarted()
    {
        SysStopwatch sysStopWatch = SysStopWatch::construct();
        int64 zero = 0;
    ;
        this.assertNotNull(sysStopWatch);
        this.assertEquals(zero, sysStopWatch.elapsedMilliseconds());
    }

    void testElapsedWideFormat()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();
        str elapsed;

        sleep(50);
        elapsed = stopwatch.elapsedWide();

        this.assertTrue(match(@'^:d:d\::d:d\::d:d\.:d+$', elapsed), elapsed);
    }

    void testElapsedWideFormat_NotStarted()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();

        this.assertNotNull(stopwatch);
        this.assertEquals('00:00:00', stopwatch.elapsedWide());
    }

    void testIsRunning()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();

        sleep(50);

        this.assertTrue(stopwatch.isRunning());
    }

    void testIsRunning_Immediately()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();

        this.assertTrue(stopwatch.isRunning());
    }

    void testIsRunning_NotStarted()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();

        this.assertFalse(stopwatch.isRunning());
    }

    void testIsRunning_Reset()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();

        stopwatch.reset();

        this.assertFalse(stopwatch.isRunning());
    }

    void testIsRunning_Start()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();

        this.assertTrue(stopwatch.isRunning());
    }

    void testIsRunning_Stop()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();

        this.assertFalse(stopwatch.isRunning());
    }

    void testReset()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();
        int64 zero = 0;

        sleep(50);
        stopwatch.reset();

        this.assertEquals(zero, stopwatch.elapsedMilliseconds());
        this.assertFalse(stopwatch.isRunning());
    }

    void testReset_NotStarted()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();
        int64 zero = 0;

        this.assertEquals(zero, stopwatch.elapsedMilliseconds());
        this.assertFalse(stopwatch.isRunning());
    }

    void testStartNew()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();

        this.assertNotNull(stopwatch);
        this.assertTrue(SysDictClass::is(stopwatch, classnum(SysStopwatch)));
        this.assertTrue(stopwatch.isRunning());
    }

    void testStop()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();
        int64 zero = 0;

        sleep(50);
        stopwatch.stop();

        this.assertNotEqual(zero, stopwatch.elapsedMilliseconds());
        this.assertFalse(stopwatch.isRunning());
    }

    void testStop_NotStarted()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();
        int64 zero = 0;

        sleep(50);
        stopwatch.stop();

        this.assertEquals(zero, stopwatch.elapsedMilliseconds());
        this.assertFalse(stopwatch.isRunning());
    }

    void testToString()
    {
        SysStopwatch stopwatch = SysStopwatch::startNew();
        str elapsed;

        sleep(50);
        elapsed = stopwatch.elapsed();

        this.assertTrue(match(@':d:d\::d:d\::d:d$', elapsed), elapsed);
    }

    void testToString_NotStarted()
    {
        SysStopwatch stopwatch = SysStopwatch::construct();

        this.assertEquals('00:00:00', stopwatch.toString());
    }
}